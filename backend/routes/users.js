const express = require('express');
const router = express.Router();
const User = require('../models/User'); // –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –ø—É—Ç—å –∫ –º–æ–¥–µ–ª–∏ –≤–µ—Ä–Ω—ã–π

router.get('/search', async (req, res) => {
    try {
        const { term, currentUserId } = req.query;

        // --- üëá –î–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏–π –ª–æ–≥ ‚Ññ1: –ß—Ç–æ –ø—Ä–∏—à–ª–æ —Å —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞? üëá ---
        console.log(`[–ü–æ–∏—Å–∫] –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å: term='${term}', currentUserId='${currentUserId}'`);

        if (!term || !currentUserId) {
            return res.json([]);
        }

        const termAsNumber = parseInt(term, 10);
        const searchCriteria = [
            { username: { $regex: term, $options: 'i' } }
        ];

        if (!isNaN(termAsNumber)) {
            searchCriteria.push({ id: termAsNumber });
        }

        // --- üëá –î–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏–π –ª–æ–≥ ‚Ññ2: –ö–∞–∫–æ–π —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –∑–∞–ø—Ä–æ—Å –º—ã —Å—Ç—Ä–æ–∏–º? üëá ---
        const finalQuery = {
            $and: [
                { $or: searchCriteria },
                { id: { $ne: parseInt(currentUserId, 10) } }
            ]
        };
        console.log('[–ü–æ–∏—Å–∫] –§–∏–Ω–∞–ª—å–Ω—ã–π –∑–∞–ø—Ä–æ—Å –∫ MongoDB:', JSON.stringify(finalQuery, null, 2));

        const users = await User.find(finalQuery).limit(10);

        // --- üëá –î–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏–π –ª–æ–≥ ‚Ññ3: –ß—Ç–æ –Ω–∞—à–ª–∞ –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö? üëá ---
        console.log(`[–ü–æ–∏—Å–∫] –ù–∞–π–¥–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${users.length}`);

        res.status(200).json(users);

    } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:", error);
        res.status(500).json({ message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
    }
});

// GET /api/users/:id - –ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ–¥–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –µ–≥–æ ID
router.get('/:id', async (req, res) => {
  try {
    const user = await User.findOne({ id: req.params.id });
    if (!user) {
      return res.status(404).json({ message: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω" });
    }
    res.status(200).json(user);
  } catch (error) {
    res.status(500).json({ message: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
  }
});

router.post('/by-ids', async (req, res) => {
    try {
        const { ids } = req.body; // –û–∂–∏–¥–∞–µ–º –º–∞—Å—Å–∏–≤ ID, –Ω–∞–ø—Ä–∏–º–µ—Ä: [123, 456]
        if (!ids || !Array.isArray(ids)) {
            return res.status(400).json({ message: "–¢—Ä–µ–±—É–µ—Ç—Å—è –º–∞—Å—Å–∏–≤ ID" });
        }

        const users = await User.find({ id: { $in: ids } });
        res.status(200).json(users);

    } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ ID:", error);
        res.status(500).json({ message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
    }
});

router.post('/friends/request', async (req, res) => {
  try {
    const { senderId, recipientId } = req.body;
    if (!senderId || !recipientId) {
      return res.status(400).json({ message: "–ù–µ–æ–±—Ö–æ–¥–∏–º—ã ID –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è –∏ –ø–æ–ª—É—á–∞—Ç–µ–ª—è." });
    }

    // –ù–∞—Ö–æ–¥–∏–º –æ–±–æ–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    const sender = await User.findOne({ id: senderId });
    const recipient = await User.findOne({ id: recipientId });

    if (!sender || !recipient) {
      return res.status(404).json({ message: "–û–¥–∏–Ω –∏–∑ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω." });
    }

    // --- –õ–æ–≥–∏–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ —Å–ø–∏—Å–∫–∏ –∑–∞—è–≤–æ–∫ (–æ—Å—Ç–∞—ë—Ç—Å—è) ---
    recipient.friendRequests.addToSet({ fromUserId: sender.id, fromUsername: sender.username, fromAvatarUrl: sender.avatarUrl });
    sender.outgoingRequests.addToSet({ toUserId: recipient.id, toUsername: recipient.username });

    // --- üëá –ù–û–í–ê–Ø –õ–û–ì–ò–ö–ê: –î–û–ë–ê–í–õ–ï–ù–ò–ï –£–í–ï–î–û–ú–õ–ï–ù–ò–Ø üëá ---
    if (!recipient.notifications) {
      recipient.notifications = [];
    }
    const newNotification = {
      id: Date.now(),
      message: `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${sender.username} –æ—Ç–ø—Ä–∞–≤–∏–ª –≤–∞–º –∑–∞—è–≤–∫—É –≤ –¥—Ä—É–∑—å—è.`,
      timestamp: new Date(),
      isRead: false,
    };
    recipient.notifications.unshift(newNotification); // –î–æ–±–∞–≤–ª—è–µ–º –≤ –Ω–∞—á–∞–ª–æ –º–∞—Å—Å–∏–≤–∞

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥–ª—è –æ–±–æ–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    await recipient.save();
    await sender.save();

    res.status(200).json({ message: "–ó–∞—è–≤–∫–∞ –≤ –¥—Ä—É–∑—å—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞." });

  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞—è–≤–∫–∏:", error);
    res.status(500).json({ message: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
  }
});

router.post('/friends/accept', async (req, res) => {
    try {
        const { userId, requesterId } = req.body;

        // --- üëá –ì–õ–ê–í–ù–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ó–î–ï–°–¨ üëá ---

        // 1. –£–¥–∞–ª—è–µ–º –∑–∞—è–≤–∫–∏, —É–∫–∞–∑—ã–≤–∞—è, –∫–∞–∫–æ–π –û–ë–™–ï–ö–¢ –Ω—É–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å
        // –£ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É–¥–∞–ª—è–µ–º –≤—Ö–æ–¥—è—â—É—é –∑–∞—è–≤–∫—É
        await User.updateOne(
            { id: userId }, 
            { $pull: { friendRequests: { fromUserId: requesterId } } }
        );
        // –£ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è —É–¥–∞–ª—è–µ–º –∏—Å—Ö–æ–¥—è—â—É—é –∑–∞—è–≤–∫—É
        await User.updateOne(
            { id: requesterId }, 
            { $pull: { outgoingRequests: { toUserId: userId } } }
        );

        // 2. –î–æ–±–∞–≤–ª—è–µ–º –¥—Ä—É–≥ –¥—Ä—É–≥–∞ –≤ —Å–ø–∏—Å–∫–∏ –¥—Ä—É–∑–µ–π (—ç—Ç–æ—Ç –∫–æ–¥ —É–∂–µ –±—ã–ª –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º)
        await User.updateOne({ id: userId }, { $addToSet: { friends: requesterId } });
        await User.updateOne({ id: requesterId }, { $addToSet: { friends: userId } });

        res.status(200).json({ message: "–ó–∞—è–≤–∫–∞ –≤ –¥—Ä—É–∑—å—è –ø—Ä–∏–Ω—è—Ç–∞." });
        
    } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–Ω—è—Ç–∏–∏ –∑–∞—è–≤–∫–∏:", error);
        res.status(500).json({ message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
    }
});

router.post('/friends/decline', async (req, res) => {
    try {
        const { userId, requesterId } = req.body;
        // –ü—Ä–æ—Å—Ç–æ —É–¥–∞–ª—è–µ–º –∑–∞—è–≤–∫–∏ —Å –æ–±–µ–∏—Ö —Å—Ç–æ—Ä–æ–Ω
        await User.updateOne({ id: userId }, { $pull: { friendRequests: { fromUserId: requesterId } } });
        await User.updateOne({ id: requesterId }, { $pull: { outgoingRequests: { toUserId: userId } } });
        res.status(200).json({ message: "–ó–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞." });
    } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ –∑–∞—è–≤–∫–∏:", error);
        res.status(500).json({ message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
    }
});

router.post('/friends/remove', async (req, res) => {
    try {
        const { userId, friendId } = req.body;
        // –£–¥–∞–ª—è–µ–º –¥—Ä—É–≥ –¥—Ä—É–≥–∞ –∏–∑ —Å–ø–∏—Å–∫–æ–≤ –¥—Ä—É–∑–µ–π
        await User.updateOne({ id: userId }, { $pull: { friends: friendId } });
        await User.updateOne({ id: friendId }, { $pull: { friends: userId } });
        res.status(200).json({ message: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–¥–∞–ª–µ–Ω –∏–∑ –¥—Ä—É–∑–µ–π." });
    } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –¥—Ä—É–≥–∞:", error);
        res.status(500).json({ message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
    }
});

router.post('/praise', async (req, res) => {
    try {
        const { targetUserId } = req.body;
        // –ù–∞—Ö–æ–¥–∏–º —é–∑–µ—Ä–∞ –∏ —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫
        await User.updateOne({ id: targetUserId }, { $inc: { praises: 1 } });
        res.status(200).json({ message: "User praised." });
    } catch (error) {
        res.status(500).json({ message: 'Server error' });
    }
});

router.post('/report', async (req, res) => {
    try {
        const { targetUserId } = req.body;
        // –ù–∞—Ö–æ–¥–∏–º —é–∑–µ—Ä–∞ –∏ —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫
        await User.updateOne({ id: targetUserId }, { $inc: { reports: 1 } });
        res.status(200).json({ message: "User reported." });
    } catch (error) {
        res.status(500).json({ message: 'Server error' });
    }
});

module.exports = router;