const express = require('express');
const router = express.Router();
const Lobby = require('../models/Lobby');
const User = require('../models/User');

// –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –í–°–ï–• –ª–æ–±–±–∏
// GET /api/lobbies
router.get('/', async (req, res) => {
  try {
    // –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ –ª–æ–±–±–∏, —É –∫–æ—Ç–æ—Ä—ã—Ö —Å—Ç–∞—Ç—É—Å –ù–ï –†–ê–í–ï–ù ($ne) 'finished'
    const lobbies = await Lobby.find({ status: { $ne: 'finished' } });
    res.status(200).json(lobbies);
  } catch (error) {
    res.status(500).json({ message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});

// –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –û–î–ù–û–ì–û –ª–æ–±–±–∏ –ø–æ ID
// GET /api/lobbies/:id
router.get('/:id', async (req, res) => {
  try {
    const lobby = await Lobby.findOne({ id: req.params.id });
    if (!lobby) {
      return res.status(404).json({ message: '–õ–æ–±–±–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ' });
    }
    res.status(200).json(lobby);
  } catch (error) {
    res.status(500).json({ message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});

// –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ù–û–í–û–ì–û –ª–æ–±–±–∏
// POST /api/lobbies
router.post('/', async (req, res) => {
  try {
    // req.body –±—É–¥–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å –≤—Å–µ –¥–∞–Ω–Ω—ã–µ, –∫–æ—Ç–æ—Ä—ã–µ –º—ã –æ—Ç–ø—Ä–∞–≤–∏–º —Å —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞
    const newLobby = new Lobby(req.body); 
    await newLobby.save(); // –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤–æ–µ –ª–æ–±–±–∏ –≤ –±–∞–∑—É
    res.status(201).json(newLobby);
  } catch (error) {
    res.status(500).json({ message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ª–æ–±–±–∏' });
  }
});

// --- üëá –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô –ú–ê–†–®–†–£–¢ –î–õ–Ø –í–•–û–î–ê –í –õ–û–ë–ë–ò üëá ---
router.put('/:id/join', async (req, res) => {
  try {
    const lobbyId = req.params.id;
    const { user: userFromRequest } = req.body;
    
    if (!userFromRequest || !userFromRequest.id) {
      return res.status(400).json({ message: '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è' });
    }

    const lobby = await Lobby.findOne({ id: lobbyId });
    if (!lobby) {
      return res.status(404).json({ message: '–õ–æ–±–±–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ' });
    }

    // --- All other checks are correct ---
    if (lobby.bannedUsers && lobby.bannedUsers.includes(String(userFromRequest.id))) {
      return res.status(403).json({ message: "–í—ã –±—ã–ª–∏ –∏—Å–∫–ª—é—á–µ–Ω—ã –∏–∑ —ç—Ç–æ–≥–æ –ª–æ–±–±–∏ –∏ –Ω–µ –º–æ–∂–µ—Ç–µ –≤–æ–π—Ç–∏ —Å–Ω–æ–≤–∞." });
    }
    const isAlreadyInSlot = lobby.slots.some(slot => slot.user?.id === userFromRequest.id);
    if (isAlreadyInSlot) {
      return res.status(200).json(lobby);
    }

    // --- üëá CORRECTED LOGIC üëá ---

    // 1. Find the index of the first free slot
    const freeSlotIndex = lobby.slots.findIndex(slot => !slot.user);

    // 2. If no free slot is found (findIndex returns -1), THEN send the error
    if (freeSlotIndex === -1) {
      return res.status(400).json({ message: '–õ–æ–±–±–∏ —É–∂–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–æ' });
    }
    
    // 3. If a slot IS found, add the user to that slot
    lobby.slots[freeSlotIndex].user = { 
      id: userFromRequest.id,
      _id: userFromRequest._id,
      email: userFromRequest.email,
      username: userFromRequest.username,
      avatarUrl: userFromRequest.avatarUrl,
      isReady: false 
    };

    // 4. Update player count and save
    lobby.players = lobby.slots.filter(s => s.user).length;
    lobby.markModified('slots');
    
    const updatedLobby = await lobby.save();
    res.status(200).json(updatedLobby);

  } catch (error) {
    console.error("–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ –ø—Ä–∏ –≤—Ö–æ–¥–µ –≤ –ª–æ–±–±–∏:", error);
    res.status(500).json({ message: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});

router.put('/:id/leave', async (req, res) => {
  try {
    const lobbyId = req.params.id;
    const { userId } = req.body;

    if (!userId) {
      return res.status(400).json({ message: 'User ID not provided' });
    }

    const lobby = await Lobby.findOne({ id: lobbyId });
    if (!lobby) {
      return res.status(200).json({ message: "Lobby no longer exists." });
    }

    // --- üëá DIAGNOSTIC "SPY" LOG üëá ---
    console.log('--- CHECKING DELETE CONDITIONS ---');
    console.log('Lobby Host ID:', lobby.host.id, '| Type:', typeof lobby.host.id);
    console.log('Leaving User ID:', userId, '| Type:', typeof userId);
    
    const isHostLeaving = String(lobby.host.id) === String(userId);
    console.log('Is Host Leaving?:', isHostLeaving);

    const playersAfterLeave = lobby.slots.filter(s => s.user && s.user.id !== userId);
    const isLobbyEmpty = playersAfterLeave.length === 0 && lobby.spectators.length === 0;
    console.log('Will Lobby Be Empty?:', isLobbyEmpty);
    console.log('---------------------------------');
    // --- End of Log ---

    if (isHostLeaving || isLobbyEmpty) {
      await Lobby.deleteOne({ id: lobbyId });
      console.log(`[Auto-Delete] Lobby ${lobbyId} deleted.`);
      return res.status(200).json({ message: "Lobby successfully deleted." });
    } else {
      // If not deleting, just update the lobby state
      lobby.slots = playersAfterLeave;
      lobby.players = playersAfterLeave.length;
      lobby.markModified('slots');
      const updatedLobby = await lobby.save();
      return res.status(200).json(updatedLobby);
    }

  } catch (error) {
    console.error("Error on server when leaving lobby:", error);
    res.status(500).json({ message: "Server error" });
  }
});

router.put('/:id/occupy', async (req, res) => {
  try {
    const { userId, slot: targetSlotInfo } = req.body; // –ü–æ–ª—É—á–∞–µ–º ID —é–∑–µ—Ä–∞ –∏ –∏–Ω—Ñ–æ –æ —Å–ª–æ—Ç–µ (team, position)
    const lobby = await Lobby.findOne({ id: req.params.id });

    if (!lobby) return res.status(404).json({ message: "–õ–æ–±–±–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ" });

    // TODO: –ó–¥–µ—Å—å –Ω—É–∂–Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. 
    // –≠—Ç—É –ª–æ–≥–∏–∫—É –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –¥–æ–±–∞–≤–∏—Ç—å, –∫–æ–≥–¥–∞ —É –≤–∞—Å –±—É–¥–µ—Ç –º–æ–¥–µ–ª—å User –Ω–∞ –±—ç–∫–µ–Ω–¥–µ.
    // –ü–æ–∫–∞ –º—ã –µ—ë –ø—Ä–æ–ø—É—Å—Ç–∏–º, –Ω–æ –ø–æ–º–Ω–∏–º –æ –Ω–µ–π.

    const targetSlot = lobby.slots.find(s => s.team === targetSlotInfo.team && s.position === targetSlotInfo.position);
    if (!targetSlot) return res.status(404).json({ message: "–¶–µ–ª–µ–≤–æ–π —Å–ª–æ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω" });
    if (targetSlot.user) return res.status(400).json({ message: "–¶–µ–ª–µ–≤–æ–π —Å–ª–æ—Ç —É–∂–µ –∑–∞–Ω—è—Ç" });

    const currentSlotIndex = lobby.slots.findIndex(s => s.user?.id === userId);
    const userAsSpectator = lobby.spectators.find(spec => spec.id === userId);
    
    // –°—Ü–µ–Ω–∞—Ä–∏–π 1: –ò–≥—Ä–æ–∫ —É–∂–µ –≤ —Å–ª–æ—Ç–µ –∏ —Ö–æ—á–µ—Ç –ø–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å—Å—è
    if (currentSlotIndex !== -1) {
      console.log("–ò–≥—Ä–æ–∫ –ø–µ—Ä–µ–º–µ—â–∞–µ—Ç—Å—è –∏–∑ –æ–¥–Ω–æ–≥–æ —Å–ª–æ—Ç–∞ –≤ –¥—Ä—É–≥–æ–π.");
      const userToMove = lobby.slots[currentSlotIndex].user; // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      lobby.slots[currentSlotIndex].user = null; // –û—Å–≤–æ–±–æ–∂–¥–∞–µ–º —Å—Ç–∞—Ä—ã–π —Å–ª–æ—Ç
      targetSlot.user = userToMove; // –ó–∞–Ω–∏–º–∞–µ–º –Ω–æ–≤—ã–π —Å–ª–æ—Ç
    } 
    // –°—Ü–µ–Ω–∞—Ä–∏–π 2: –ó—Ä–∏—Ç–µ–ª—å –∑–∞–Ω–∏–º–∞–µ—Ç —Å–ª–æ—Ç
    else if (userAsSpectator) {
      console.log("–ó—Ä–∏—Ç–µ–ª—å –∑–∞–Ω–∏–º–∞–µ—Ç —Å–ª–æ—Ç.");
      targetSlot.user = { ...userAsSpectator, isReady: false }; // –ó–∞–Ω–∏–º–∞–µ–º —Å–ª–æ—Ç
      lobby.spectators = lobby.spectators.filter(spec => spec.id !== userId); // –£–¥–∞–ª—è–µ–º –∏–∑ –∑—Ä–∏—Ç–µ–ª–µ–π
    } 
    // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∏ –≤ —Å–ª–æ—Ç–∞—Ö, –Ω–∏ –≤ –∑—Ä–∏—Ç–µ–ª—è—Ö
    else {
      return res.status(404).json({ message: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —ç—Ç–æ–º –ª–æ–±–±–∏" });
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º
    lobby.players = lobby.slots.filter(s => s.user).length;
    lobby.markModified('slots');
    lobby.markModified('spectators');

    const updatedLobby = await lobby.save();
    res.status(200).json(updatedLobby);

  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –∑–∞–Ω—è—Ç—å —Å–ª–æ—Ç:", error);
    res.status(500).json({ message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});

router.put('/:id/vacate', async (req, res) => {
  try {
    const { userId } = req.body;
    const lobby = await Lobby.findOne({ id: req.params.id });

    if (!lobby) return res.status(404).json({ message: "–õ–æ–±–±–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ" });

    const slotIndex = lobby.slots.findIndex(s => s.user?.id === userId);
    if (slotIndex === -1) return res.status(404).json({ message: "–ò–≥—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–ª–æ—Ç–µ" });

    const userToMove = lobby.slots[slotIndex].user;

    // TODO: –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –¥–µ–Ω–µ–≥ (lobby.entryFee) –Ω–∞ –±–∞–ª–∞–Ω—Å userToMove.
    // –≠—Ç–æ –ø–æ—Ç—Ä–µ–±—É–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –º–æ–¥–µ–ª–∏ User.

    // –ü–µ—Ä–µ–º–µ—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    lobby.slots[slotIndex].user = null; // –û—Å–≤–æ–±–æ–∂–¥–∞–µ–º —Å–ª–æ—Ç
    if (!lobby.spectators.some(spec => spec.id === userId)) {
        lobby.spectators.push(userToMove); // –î–æ–±–∞–≤–ª—è–µ–º –≤ –∑—Ä–∏—Ç–µ–ª–∏, –µ—Å–ª–∏ –µ–≥–æ —Ç–∞–º –µ—â–µ –Ω–µ—Ç
    }
    lobby.players = lobby.slots.filter(s => s.user).length;

    lobby.markModified('slots');
    lobby.markModified('spectators');

    const updatedLobby = await lobby.save();
    res.status(200).json(updatedLobby);

  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏–∏ —Å–ª–æ—Ç–∞:", error);
    res.status(500).json({ message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});

router.put('/:id/ready', async (req, res) => {
  try {
    const lobbyId = req.params.id;
    const { userId } = req.body;

    if (!userId) {
      return res.status(400).json({ message: '–ù–µ —É–∫–∞–∑–∞–Ω ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è' });
    }

    const lobby = await Lobby.findOne({ id: lobbyId });
    if (!lobby) {
      return res.status(404).json({ message: "–õ–æ–±–±–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ" });
    }

    const slot = lobby.slots.find(s => s.user?.id === userId);
    if (!slot || !slot.user) {
      return res.status(404).json({ message: "–ò–≥—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —ç—Ç–æ–º –ª–æ–±–±–∏" });
    }

    // 1. –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º —Å—Ç–∞—Ç—É—Å –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∏–≥—Ä–æ–∫–∞
    slot.user.isReady = !slot.user.isReady;

    // --- üëá –í–û–¢ –ì–õ–ê–í–ù–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï üëá ---
    
    // 2. –ü–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è, –ø—Ä–æ–≤–µ—Ä—è–µ–º, –≥–æ—Ç–æ–≤—ã –ª–∏ —Ç–µ–ø–µ—Ä—å –í–°–ï –∏–≥—Ä–æ–∫–∏
    const playersInSlots = lobby.slots.filter(s => s.user);
    const areAllPlayersReady = playersInSlots.length === lobby.maxPlayers && playersInSlots.every(p => p.user.isReady);

    if (areAllPlayersReady) {
      // 3. –ï—Å–ª–∏ –≤—Å–µ –≥–æ—Ç–æ–≤—ã - –∑–∞–ø—É—Å–∫–∞–µ–º –æ—Ç—Å—á–µ—Ç!
      lobby.status = 'countdown';
      lobby.countdownStartTime = Date.now();
      console.log(`[–õ–æ–±–±–∏ ${lobby.id}] –í—Å–µ –≥–æ—Ç–æ–≤—ã! –ó–∞–ø—É—Å–∫ –æ—Ç—Å—á–µ—Ç–∞.`);
    } else {
      // 4. –ï—Å–ª–∏ –∫—Ç–æ-—Ç–æ –æ—Ç–º–µ–Ω–∏–ª –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å - —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Ç–∞–π–º–µ—Ä
      lobby.status = 'waiting';
      lobby.countdownStartTime = null;
      console.log(`[–õ–æ–±–±–∏ ${lobby.id}] –û—Ç–º–µ–Ω–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏. –û—Ç—Å—á–µ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.`);
    }
    // --- –ö–æ–Ω–µ—Ü –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è ---

    lobby.markModified('slots'); // –ü–æ–º–µ—á–∞–µ–º –º–∞—Å—Å–∏–≤ –∫–∞–∫ –∏–∑–º–µ–Ω–µ–Ω–Ω—ã–π

    const updatedLobby = await lobby.save();
    res.status(200).json(updatedLobby);

  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–º–µ–Ω–µ —Å—Ç–∞—Ç—É—Å–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏:", error);
    res.status(500).json({ message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});

router.put('/:id/kick', async (req, res) => {
  try {
    const lobbyId = req.params.id;
    // –° —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞ –º—ã –ø–æ–ª—É—á–∏–º ID —Ç–æ–≥–æ, –ö–û–ì–û –∫–∏–∫–∞–µ–º, –∏ ID —Ç–æ–≥–æ, –ö–¢–û –∫–∏–∫–∞–µ—Ç (—Ö–æ—Å—Ç)
    const { userIdToKick, hostId } = req.body;

    if (!userIdToKick || !hostId) {
      return res.status(400).json({ message: '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∫–∏–∫–∞' });
    }

    const lobby = await Lobby.findOne({ id: lobbyId });
    if (!lobby) {
      return res.status(404).json({ message: "–õ–æ–±–±–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ" });
    }

    console.log('--- –ü–†–û–í–ï–†–ö–ê –•–û–°–¢–ê ---');
    console.log('ID —Ö–æ—Å—Ç–∞, —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–π –≤ –ª–æ–±–±–∏:', lobby.host.id, '| –¢–∏–ø:', typeof lobby.host.id);
    console.log('ID —Ö–æ—Å—Ç–∞, –ø—Ä–∏—à–µ–¥—à–∏–π —Å —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞:', hostId, '| –¢–∏–ø:', typeof hostId);

    // --- üîê –°–ê–ú–ê–Ø –í–ê–ñ–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê: –ê–í–¢–û–†–ò–ó–ê–¶–ò–Ø ---
    // –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º ID —Ö–æ—Å—Ç–∞ –∏–∑ –∑–∞–ø—Ä–æ—Å–∞ —Å ID —Ö–æ—Å—Ç–∞, –∑–∞–ø–∏—Å–∞–Ω–Ω—ã–º –≤ –ª–æ–±–±–∏
    // –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã —Å—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –ø–æ–ª—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, user.id –∏ lobby.host.id)
    if (String(lobby.host.id) !== String(hostId)) {
      console.log('--- –ü–†–û–í–ï–†–ö–ê –ü–†–û–í–ê–õ–ï–ù–ê ---'); // –î–æ–±–∞–≤–∏–º –ª–æ–≥, —á—Ç–æ–±—ã –≤–∏–¥–µ—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç
      return res.status(403).json({ message: "–¢–æ–ª—å–∫–æ —Ö–æ—Å—Ç –º–æ–∂–µ—Ç –∫–∏–∫–∞—Ç—å –∏–≥—Ä–æ–∫–æ–≤!" });
    }

    // –ù–∞—Ö–æ–¥–∏–º —Å–ª–æ—Ç –∏–≥—Ä–æ–∫–∞, –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω—É–∂–Ω–æ –∫–∏–∫–Ω—É—Ç—å
    const slotIndex = lobby.slots.findIndex(s => s.user?.id === userIdToKick);

    if (slotIndex !== -1) {
      lobby.bannedUsers.push(userIdToKick);
      lobby.slots[slotIndex].user = null; // –û—á–∏—â–∞–µ–º —Å–ª–æ—Ç
      lobby.players = lobby.slots.filter(s => s.user).length; // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á—ë—Ç—á–∏–∫
      lobby.markModified('slots'); // –ü–æ–º–µ—á–∞–µ–º –º–∞—Å—Å–∏–≤ –∫–∞–∫ –∏–∑–º–µ–Ω–µ–Ω–Ω—ã–π
    } else {
        return res.status(404).json({ message: "–ö–∏–∫–∞–µ–º—ã–π –∏–≥—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–ª–æ—Ç–µ" });
    }

    const updatedLobby = await lobby.save();
    res.status(200).json(updatedLobby);

  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–∏–∫–µ –∏–≥—Ä–æ–∫–∞:", error);
    res.status(500).json({ message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});

router.put('/:id/start', async (req, res) => {
  try {
    const lobbyId = req.params.id;
    const { hostId } = req.body;

    const lobby = await Lobby.findOne({ id: lobbyId });
    if (!lobby) {
      return res.status(404).json({ message: "Lobby not found" });
    }

    // 1. üîê Security Check: Only the host can start the game
    if (String(lobby.host.id) !== String(hostId)) {
      return res.status(403).json({ message: "Only the host can start the game!" });
    }

    // 2. Logic Check: The game shouldn't already be in progress or finished
    if (lobby.status === 'in_progress' || lobby.status === 'finished') {
        return res.status(400).json({ message: "The game has already started or is finished." });
    }

    // 3. Update the lobby status
    lobby.status = 'in_progress';
    lobby.countdownStartTime = null; // Clear the timer just in case

    const updatedLobby = await lobby.save();
    res.status(200).json(updatedLobby);

  } catch (error)
    {
    console.error("Error starting game:", error);
    res.status(500).json({ message: 'Server error' });
  }
});

router.post('/:id/chat', async (req, res) => {
  try {
    const { user, message } = req.body; // –ü–æ–ª—É—á–∞–µ–º —é–∑–µ—Ä–∞ –∏ –µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–µ

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—É—Å—Ç—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    if (!message || message.trim() === '') {
      return res.status(400).json({ message: "–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º" });
    }

    const lobby = await Lobby.findOne({ id: req.params.id });
    if (!lobby) return res.status(404).json({ message: "–õ–æ–±–±–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ" });

    // –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
    const newMessage = {
      user: {
        id: user.id,
        username: user.username,
        avatarUrl: user.avatarUrl
      },
      message: message,
      timestamp: new Date() // –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–∞—Ç—É –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ–π —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –≤ –±—É–¥—É—â–µ–º
    };

    lobby.chat.push(newMessage);
    lobby.markModified('chat');

    const updatedLobby = await lobby.save();
    res.status(200).json(updatedLobby);

  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è:", error);
    res.status(500).json({ message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});

router.post('/:id/declare-winner', async (req, res) => {
  try {
    const { hostId, winningTeam } = req.body;
    const lobby = await Lobby.findOne({ id: req.params.id });

    // --- –ü—Ä–æ–≤–µ—Ä–∫–∏ –æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π ---
    if (!lobby) return res.status(404).json({ message: "–õ–æ–±–±–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ" });
    if (String(lobby.host.id) !== String(hostId)) {
      return res.status(403).json({ message: "–¢–æ–ª—å–∫–æ —Ö–æ—Å—Ç –º–æ–∂–µ—Ç –æ–ø—Ä–µ–¥–µ–ª—è—Ç—å –ø–æ–±–µ–¥–∏—Ç–µ–ª—è!" });
    }
    if (lobby.status !== 'in_progress') {
      return res.status(400).json({ message: "–ò–≥—Ä–∞ –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ" });
    }

    const entryFee = lobby.entryFee;
    const winners = lobby.slots.filter(s => s.user && s.team === winningTeam).map(s => s.user);
    const losers = lobby.slots.filter(s => s.user && s.team !== winningTeam).map(s => s.user);
    
    // --- üëá –ù–û–í–ê–Ø –ò –ü–†–ê–í–ò–õ–¨–ù–ê–Ø –õ–û–ì–ò–ö–ê –†–ê–°–ü–†–ï–î–ï–õ–ï–ù–ò–Ø –ü–†–ò–ó–û–í üëá ---

    // 1. –°–ø–∏—Å—ã–≤–∞–µ–º –¥–µ–Ω—å–≥–∏ —Å –ø—Ä–æ–∏–≥—Ä–∞–≤—à–∏—Ö
    for (const loser of losers) {
      await User.updateOne({ id: loser.id }, { $inc: { balance: -entryFee } });
      console.log(`[–°–ø–∏—Å–∞–Ω–æ] –° –∏–≥—Ä–æ–∫–∞ ${loser.username} —Å–ø–∏—Å–∞–Ω–æ ${entryFee}$.`);
    }

    // 2. –ù–∞—á–∏—Å–ª—è–µ–º –¥–µ–Ω—å–≥–∏ –ø–æ–±–µ–¥–∏—Ç–µ–ª—è–º (–∫–∞–∂–¥—ã–π –ø–æ–±–µ–¥–∏—Ç–µ–ª—å –ø–æ–ª—É—á–∞–µ—Ç –≤–∑–Ω–æ—Å –æ–¥–Ω–æ–≥–æ –ø—Ä–æ–∏–≥—Ä–∞–≤—à–µ–≥–æ)
    // –≠—Ç–∞ –ª–æ–≥–∏–∫–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –¥–ª—è –∏–≥—Ä 1v1, 2v2, 5v5 –∏ —Ç.–¥.
    const amountToWin = entryFee * (losers.length / winners.length);
    for (const winner of winners) {
      await User.updateOne({ id: winner.id }, { $inc: { balance: amountToWin } });
      console.log(`[–ù–∞—á–∏—Å–ª–µ–Ω–æ] –ò–≥—Ä–æ–∫—É ${winner.username} –Ω–∞—á–∏—Å–ª–µ–Ω–æ ${amountToWin}$.`);
    }
    
    // 3. –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ª–æ–±–±–∏
    lobby.status = 'finished';
    const updatedLobby = await lobby.save();

    res.status(200).json({ message: `–ö–æ–º–∞–Ω–¥–∞ ${winningTeam} –ø–æ–±–µ–¥–∏–ª–∞!`, lobby: updatedLobby });

  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–∏ –ø—Ä–∏–∑–æ–≤:", error);
    res.status(500).json({ message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});

module.exports = router;