const express = require('express');
const router = express.Router();
const Lobby = require('../models/Lobby'); // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–æ–¥–µ–ª—å –ª–æ–±–±–∏

// –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –í–°–ï–• –ª–æ–±–±–∏
// GET /api/lobbies
router.get('/', async (req, res) => {
  try {
    const lobbies = await Lobby.find(); // –ù–∞—Ö–æ–¥–∏—Ç –≤—Å–µ –ª–æ–±–±–∏ –≤ –±–∞–∑–µ
    res.status(200).json(lobbies);
  } catch (error) {
    res.status(500).json({ message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});

// –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –û–î–ù–û–ì–û –ª–æ–±–±–∏ –ø–æ ID
// GET /api/lobbies/:id
router.get('/:id', async (req, res) => {
  try {
    const lobby = await Lobby.findOne({ id: req.params.id });
    if (!lobby) {
      return res.status(404).json({ message: '–õ–æ–±–±–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ' });
    }
    res.status(200).json(lobby);
  } catch (error) {
    res.status(500).json({ message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});

// –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ù–û–í–û–ì–û –ª–æ–±–±–∏
// POST /api/lobbies
router.post('/', async (req, res) => {
  try {
    // req.body –±—É–¥–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å –≤—Å–µ –¥–∞–Ω–Ω—ã–µ, –∫–æ—Ç–æ—Ä—ã–µ –º—ã –æ—Ç–ø—Ä–∞–≤–∏–º —Å —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞
    const newLobby = new Lobby(req.body); 
    await newLobby.save(); // –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤–æ–µ –ª–æ–±–±–∏ –≤ –±–∞–∑—É
    res.status(201).json(newLobby);
  } catch (error) {
    res.status(500).json({ message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ª–æ–±–±–∏' });
  }
});

// --- üëá –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô –ú–ê–†–®–†–£–¢ –î–õ–Ø –í–•–û–î–ê –í –õ–û–ë–ë–ò üëá ---
router.put('/:id/join', async (req, res) => {
  try {
    const { user, isSpectator } = req.body;
    const lobbyId = req.params.id;

    const lobby = await Lobby.findOne({ id: lobbyId });
    if (!lobby) {
      return res.status(404).json({ message: '–õ–æ–±–±–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ' });
    }

    if (isSpectator) {
      lobby.spectators.push(user);
    } else {
      const freeSlotIndex = lobby.slots.findIndex(slot => !slot.user);
      if (freeSlotIndex !== -1) {
        // –°–æ–∑–¥–∞–µ–º —á–∏—Å—Ç—ã–π –æ–±—ä–µ–∫—Ç –¥–ª—è —Å–ª–æ—Ç–∞, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –ø—Ä–æ–±–ª–µ–º
        lobby.slots[freeSlotIndex].user = { 
          id: user.id,
          email: user.email,
          username: user.username,
          avatarUrl: user.avatarUrl,
          isReady: false 
        };
        lobby.players = (lobby.players || 0) + 1;
      } else {
        return res.status(400).json({ message: '–õ–æ–±–±–∏ —É–∂–µ –ø–æ–ª–Ω–æ–µ' });
      }
    }

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –∏ –∂–¥–µ–º, –ø–æ–∫–∞ –æ–Ω–∏ –ø—Ä–∏–º–µ–Ω—è—Ç—Å—è
    const updatedLobby = await lobby.save();

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥ —É–∂–µ 100% –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ –ª–æ–±–±–∏
    res.status(200).json(updatedLobby);

  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ –ø—Ä–∏ –≤—Ö–æ–¥–µ –≤ –ª–æ–±–±–∏:", error);
    res.status(500).json({ message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});

module.exports = router;