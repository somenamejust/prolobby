import React, { useState, useEffect, useRef, useMemo } from 'react';
import { useParams, useNavigate, Link } from 'react-router-dom';
import { useAuth } from '../context/AuthContext';
import toast from 'react-hot-toast';
import axios from 'axios';
import { io } from "socket.io-client";

import UserProfileModal from '../components/UserProfileModal';
import UserActionsDropdown from '../components/UserActionsDropdown';
import GameInProgressModal from '../components/GameInProgressModal';
import cs2Logo from '../assets/images/cs2_logo2.png';
import cs2Bg from '../assets/images/Cs2dust2.png';
import dota2Bg from '../assets/images/dota2_bg3.jpg';

const GAME_ASSETS = {
  'CS2': {
    logo: cs2Logo,
    bg: cs2Bg,
  },
  'Valorant': {
    logo: 'https://upload.wikimedia.org/wikipedia/commons/thumb/f/fc/Valorant_logo_-_pink_color_version.svg/1280px-Valorant_logo_-_pink_color_version.svg.png',
    bg: 'https://images.alphacoders.com/132/1322237.png',
  },
  'Dota 2': {
    logo: 'https://upload.wikimedia.org/wikipedia/ru/b/b8/Dota_2_Logo.png',
    bg: dota2Bg,
  },
  // –î–æ–±–∞–≤—å –¥—Ä—É–≥–∏–µ –∏–≥—Ä—ã –ø–æ –∞–Ω–∞–ª–æ–≥–∏–∏
  'Fortnite': {
    logo: 'https://upload.wikimedia.org/wikipedia/commons/thumb/7/7c/Fortnite_F_lettermark_logo.svg/1024px-Fortnite_F_lettermark_logo.svg.png',
    bg: 'https://images.alphacoders.com/131/1319629.jpg',
  },
  'Custom Game': {
    logo: '', // –ú–æ–∂–Ω–æ –æ—Å—Ç–∞–≤–∏—Ç—å –ø—É—Å—Ç—ã–º –∏–ª–∏ –¥–æ–±–∞–≤–∏—Ç—å —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é –∏–∫–æ–Ω–∫—É
    bg: 'https://images.alphacoders.com/133/1330026.png',
  }
};

export default function LobbyIn() {
  // --- 1. –•–£–ö–ò –ò –°–û–°–¢–û–Ø–ù–ò–Ø ---
  const { lobbyId } = useParams();
  const { user, leaveLobbySession, refreshUser } = useAuth();
  const navigate = useNavigate();

  const [lobby, setLobby] = useState(null);
  const [isLoading, setIsLoading] = useState(true);
  const [isRedirecting, setIsRedirecting] = useState(false);
  const [chatMessage, setChatMessage] = useState('');
  const [modalUser, setModalUser] = useState(null);
  const [timer, setTimer] = useState(null);
  const [menuData, setMenuData] = useState({ targetUser: null, position: null });
  
  const dropdownRef = useRef(null);
  const chatContainerRef = useRef(null);

  // --- 2. –≠–§–§–ï–ö–¢–´ ---
  // --- 1. useEffect: –ó–ê–ì–†–£–ó–ß–ò–ö –î–ê–ù–ù–´–• ---
  // –ï–≥–æ –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–∞—è –∑–∞–¥–∞—á–∞ - –ø–æ—Å—Ç–æ—è–Ω–Ω–æ –ø–æ–ª—É—á–∞—Ç—å —Å–≤–µ–∂–∏–µ –¥–∞–Ω–Ω—ã–µ –æ –ª–æ–±–±–∏.
  useEffect(() => {
    // 1. –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö
    const fetchInitialLobbyData = async () => {
      try {
        const response = await axios.get(`/api/lobbies/${lobbyId}`);
        setLobby(response.data);
      } catch (error) {
        console.error("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ª–æ–±–±–∏:", error);
        toast.error("–õ–æ–±–±–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∏–ª–∏ —É–¥–∞–ª–µ–Ω–æ.");
        navigate('/lobby'); // –ï—Å–ª–∏ –ª–æ–±–±–∏ –Ω–µ—Ç, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      } finally {
        setIsLoading(false);
      }
    };

    fetchInitialLobbyData(); // –í—ã–∑—ã–≤–∞–µ–º –µ—ë —Å—Ä–∞–∑—É

    // 2. –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —á–µ—Ä–µ–∑ WebSocket –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
    const socket = io("http://localhost:5000");

    socket.on('connect', () => {
      console.log('üîå WebSocket Connected!', socket.id);
      socket.emit('joinLobbyRoom', lobbyId); // –°–æ–æ–±—â–∞–µ–º —Å–µ—Ä–≤–µ—Ä—É, –∫ –∫–∞–∫–æ–π "–∫–æ–º–Ω–∞—Ç–µ" –º—ã —Ö–æ—Ç–∏–º –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è
    });

    // 3. –°–ª—É—à–∞–µ–º —Å–æ–±—ã—Ç–∏–µ 'lobbyUpdated' –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞
    socket.on('lobbyUpdated', (updatedLobbyData) => {
      console.log("–ü–æ–ª—É—á–µ–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ª–æ–±–±–∏ —á–µ—Ä–µ–∑ WebSocket:", updatedLobbyData);
      setLobby(updatedLobbyData); // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
    });
    
    socket.on('disconnect', () => {
      console.log('‚ùå WebSocket Disconnected');
    });

    // 4. –û—á–∏—Å—Ç–∫–∞ –ø—Ä–∏ —É—Ö–æ–¥–µ —Å–æ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    return () => {
      socket.disconnect();
    };
  }, [lobbyId, navigate]); // –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç—å —Ç–æ–ª—å–∫–æ –æ—Ç lobbyId


  // --- 2. useEffect: –†–ï–ê–ì–ò–†–£–Æ–©–ò–ô –ù–ê –ò–ó–ú–ï–ù–ï–ù–ò–Ø ---
  // –≠—Ç–æ—Ç —ç—Ñ—Ñ–µ–∫—Ç —Å–ª–µ–¥–∏—Ç –∑–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º `lobby` –∏ —Ä–µ—à–∞–µ—Ç, –Ω—É–∂–Ω–æ –ª–∏ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
  useEffect(() => {
    // –ù–µ –¥–µ–ª–∞—Ç—å –Ω–∏—á–µ–≥–æ, –µ—Å–ª–∏ –ª–æ–±–±–∏ –µ—â–µ –Ω–µ –∑–∞–≥—Ä—É–∑–∏–ª–æ—Å—å –∏–ª–∏ –º—ã —É–∂–µ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    if (!lobby || isRedirecting) return;

    // –°—Ü–µ–Ω–∞—Ä–∏–π 1: –ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –≠—Ç–æ —Å—Ä–∞–±–æ—Ç–∞–µ—Ç –¥–ª—è –í–°–ï–• –∏–≥—Ä–æ–∫–æ–≤.
    if (lobby.status === 'finished') {
      setIsRedirecting(true); // –í–∫–ª—é—á–∞–µ–º —Ñ–ª–∞–≥, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏—è
      toast.success("–ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –í–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ –≤ –ª–æ–±–±–∏...");
      
      refreshUser().then(() => {
        setTimeout(() => {
          leaveLobbySession();
          navigate('/lobby');
        }, 4000);
      });
      return; // –í—ã—Ö–æ–¥–∏–º, —á—Ç–æ–±—ã –Ω–µ –ø—Ä–æ–≤–µ—Ä—è—Ç—å –¥—Ä—É–≥–∏–µ —É—Å–ª–æ–≤–∏—è
    }

    // –°—Ü–µ–Ω–∞—Ä–∏–π 2: –ò–≥—Ä–æ–∫–∞ –∫–∏–∫–Ω—É–ª–∏.
    if (user) {
      const amIInSlots = lobby.slots.some(slot => slot.user?.id === user.id);
      const amIInSpectators = lobby.spectators.some(spec => spec.id === user.id);
      
      // –ï—Å–ª–∏ –º–µ–Ω—è –Ω–µ—Ç –Ω–∏ –≤ —Å–ª–æ—Ç–∞—Ö, –Ω–∏ –≤ –∑—Ä–∏—Ç–µ–ª—è—Ö, –Ω–æ —è "–¥—É–º–∞–ª", —á—Ç–æ —è –≤ —ç—Ç–æ–º –ª–æ–±–±–∏
      if (!amIInSlots && !amIInSpectators && String(user.currentLobbyId) === String(lobbyId)) {
        setIsRedirecting(true);
        toast.error("–•–æ—Å—Ç –∏—Å–∫–ª—é—á–∏–ª –≤–∞—Å –∏–∑ –ª–æ–±–±–∏.");
        leaveLobbySession();
        navigate('/lobby');
      }
    }
  }, [lobby, user, lobbyId, isRedirecting, navigate, leaveLobbySession, refreshUser]);

  // --- 3. useEffect: –¢–ê–ô–ú–ï–† ---
  useEffect(() => {
    if (lobby?.status !== 'countdown' || !lobby.countdownStartTime) {
      setTimer(null);
      return;
    }
    const interval = setInterval(() => {
      const remaining = 60 - Math.floor((Date.now() - lobby.countdownStartTime) / 1000);
      if (remaining <= 0) {
        setTimer(0);
        clearInterval(interval);
        // –õ–æ–≥–∏–∫–∞ –∞–≤—Ç–æ-—Å—Ç–∞—Ä—Ç–∞ –∏–≥—Ä—ã —Ç–µ–ø–µ—Ä—å –ø–æ–ª–Ω–æ—Å—Ç—å—é –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ, –∫–ª–∏–µ–Ω—Ç –ø—Ä–æ—Å—Ç–æ –∂–¥—ë—Ç —Å–º–µ–Ω—ã —Å—Ç–∞—Ç—É—Å–∞
      } else {
        setTimer(remaining);
      }
    }, 1000);
    return () => clearInterval(interval);
  }, [lobby]);

  // --- useMemo –¥–ª—è –≤—ã—á–∏—Å–ª–µ–Ω–∏—è –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ---
  const { allPlayersReady } = useMemo(() => {
    if (!lobby?.slots) return { allPlayersReady: false };
    const playersInSlots = lobby.slots.filter(slot => slot.user);
    return {
      allPlayersReady: playersInSlots.length === lobby.maxPlayers && playersInSlots.every(p => p.user.isReady)
    };
  }, [lobby]);
  
  // --- useEffect –¥–ª—è –ø—Ä–æ–∫—Ä—É—Ç–∫–∏ —á–∞—Ç–∞ (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ---
  useEffect(() => {
    if (chatContainerRef.current) {
      chatContainerRef.current.scrollTop = chatContainerRef.current.scrollHeight;
    }
  }, [lobby?.chat]);

  // --- 3. –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –°–û–ë–´–¢–ò–ô ---

    // --- üëá 5. –î–û–ë–ê–í–õ–Ø–ï–ú –ï–î–ò–ù–´–ô –û–ë–†–ê–ë–û–¢–ß–ò–ö –ö–õ–ò–ö–ê –ü–û –Æ–ó–ï–†–£ üëá ---
  const handleUserClick = (event, targetUser) => {
    event.preventDefault();
    event.stopPropagation();
    
    if (menuData.targetUser?.id === targetUser.id) {
      setMenuData({ targetUser: null, position: null }); // –ó–∞–∫—Ä—ã—Ç—å, –µ—Å–ª–∏ —É–∂–µ –æ—Ç–∫—Ä—ã—Ç–æ
    } else {
      setMenuData({
        targetUser: targetUser,
        position: { top: event.pageY, left: event.pageX } // –û—Ç–∫—Ä—ã—Ç—å –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º –∫–ª–∏–∫–∞
      });
    }
  };

  const handleOccupySlot = async (slotToOccupy) => {
    if (!user || !lobby) return;

    try {
      const response = await fetch(`/api/lobbies/${lobby.id}/occupy`, {
        method: 'PUT',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ 
          userId: user.id, 
          slot: { team: slotToOccupy.team, position: slotToOccupy.position } 
        }),
      });

      const updatedLobby = await response.json();

      if (!response.ok) {
        throw new Error(updatedLobby.message || "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–Ω—è—Ç—å —Å–ª–æ—Ç");
      }

      setLobby(updatedLobby); // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ª–æ–±–±–∏

    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –∑–∞–Ω—è—Ç—å —Å–ª–æ—Ç:", error);
      toast.error(error.message);
    }
  };

  const handleLeaveLobby = async () => {
    if (!user || !lobby) return;

    try {
      // Call the already-refactored function from AuthContext.
      // This is the function that sends the request to your backend.
      await leaveLobbySession();
      
      // After the backend confirms the exit and deletes the lobby, navigate the user away.
      navigate('/lobby');
      toast.success("–í—ã –ø–æ–∫–∏–Ω—É–ª–∏ –ª–æ–±–±–∏.");

    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ –∏–∑ –ª–æ–±–±–∏:", error);
      toast.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–∫–∏–Ω—É—Ç—å –ª–æ–±–±–∏.");
    }
  };

  const handleLeaveSlot = async () => {
    if (!user || !lobby) return;

    try {
      const response = await fetch(`/api/lobbies/${lobby.id}/vacate`, {
        method: 'PUT',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ userId: user.id }),
      });

      const updatedLobby = await response.json();

      if (!response.ok) {
        throw new Error(updatedLobby.message || "–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Å–≤–æ–±–æ–¥–∏—Ç—å —Å–ª–æ—Ç");
      }

      setLobby(updatedLobby); // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ

    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏–∏ —Å–ª–æ—Ç–∞:", error);
      toast.error(error.message);
    }
  };

  const handleReadyToggle = async () => {
    if (!lobby || !user) return;

    try {
      const response = await fetch(`/api/lobbies/${lobby.id}/ready`, {
        method: 'PUT',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ userId: user.id }),
      });

      const updatedLobby = await response.json();

      if (!response.ok) {
        throw new Error(updatedLobby.message || "–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å");
      }

      // –ú–≥–Ω–æ–≤–µ–Ω–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ª–æ–±–±–∏ –¥–∞–Ω–Ω—ã–º–∏ —Å —Å–µ—Ä–≤–µ—Ä–∞
      setLobby(updatedLobby);

    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–º–µ–Ω–µ —Å—Ç–∞—Ç—É—Å–∞:", error);
      toast.error(error.message || "–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å");
    }
  };

  const handleStartGame = async () => {
    // Client-side check for better UX
    if (!user || !lobby || user.email !== lobby.host.email) {
      toast.error("Only the host can start the game.");
      return;
    }

    try {
      const response = await fetch(`/api/lobbies/${lobby.id}/start`, {
        method: 'PUT',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ hostId: user.id }),
      });

      const updatedLobby = await response.json();

      if (!response.ok) {
        throw new Error(updatedLobby.message || "Failed to start the game");
      }

      // Update the local state with the authoritative response from the server
      setLobby(updatedLobby);
      toast.success("The game has started!");

    } catch (error) {
      console.error("Error starting game:", error);
      toast.error(error.message);
    }
  };

  const handleDeclareWinner = async (winningTeam) => {
      if (!user || !lobby || user.email !== lobby.host.email) return;

      try {
        const response = await fetch(`/api/lobbies/${lobby.id}/declare-winner`, {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ 
            hostId: user.id, 
            winningTeam: winningTeam 
          }),
        });

      const result = await response.json();

      if (!response.ok) {
        throw new Error(result.message || "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≤–µ—Ä—à–∏—Ç—å –∏–≥—Ä—É");
      }

      // --- üëá –ò–ó–ú–ï–ù–ï–ù–ò–ï –ó–î–ï–°–¨ üëá ---
      // –ú—ã –±–æ–ª—å—à–µ –ù–ï –≤—ã–∑—ã–≤–∞–µ–º navigate –∏ setTimeout –∑–¥–µ—Å—å.
      // –ú—ã –ø—Ä–æ—Å—Ç–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ. –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ª–æ–±–±–∏
      // –∏ –ø–æ—Å–ª–µ–¥—É—é—â–∏–π —Ä–µ–¥–∏—Ä–µ–∫—Ç –ø—Ä–æ–∏–∑–æ–π–¥—É—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —á–µ—Ä–µ–∑ useEffect.
      toast.success(result.message);

    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –∏–≥—Ä—ã:", error);
      toast.error(error.message);
    }
  };

  const handleSendMessage = async (e) => {
    e.preventDefault();
    if (!chatMessage.trim() || !user || !lobby) return;

    // –û–ø—Ç–∏–º–∏—Å—Ç–∏—á–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: —Å–Ω–∞—á–∞–ª–∞ –æ–±–Ω–æ–≤–ª—è–µ–º UI, –ø–æ—Ç–æ–º –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å
    // –≠—Ç–æ —Å–æ–∑–¥–∞–µ—Ç –æ—â—É—â–µ–Ω–∏–µ –º–≥–Ω–æ–≤–µ–Ω–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏
    const newMessage = {
      user: { id: user.id, username: user.username, avatarUrl: user.avatarUrl },
      message: chatMessage,
      timestamp: new Date()
    };
    setLobby(prevLobby => ({
      ...prevLobby,
      chat: [...prevLobby.chat, newMessage]
    }));
    setChatMessage(''); // –°—Ä–∞–∑—É –æ—á–∏—â–∞–µ–º –ø–æ–ª–µ –≤–≤–æ–¥–∞

    try {
      const response = await fetch(`/api/lobbies/${lobby.id}/chat`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ user, message: chatMessage }),
      });

      const data = await response.json();

      if (!response.ok) {
        throw new Error(data.message || "–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ");
      }
      
      // –ó–∞–º–µ–Ω—è–µ–º "–≤—Ä–µ–º–µ–Ω–Ω–æ–µ" —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ —Ç–æ—á–Ω–æ–µ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞,
      // —á—Ç–æ–±—ã –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –±—ã–ª–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω—ã.
      setLobby(data);

    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è:", error);
      toast.error(error.message);
      // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –æ—Ç–∫–∞—Ç–∞ –æ–ø—Ç–∏–º–∏—Å—Ç–∏—á–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    }
  };

  const handleKickPlayer = async (userToKick) => {
    // –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ —Ç–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - —Ö–æ—Å—Ç (–¥–ª—è –±—ã—Å—Ç—Ä–æ–π —Ä–µ–∞–∫—Ü–∏–∏ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞)
    if (!user || !lobby || user.email !== lobby.host.email) {
      toast.error("–¢–æ–ª—å–∫–æ —Ö–æ—Å—Ç –º–æ–∂–µ—Ç –≤—ã–ø–æ–ª–Ω—è—Ç—å —ç—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ.");
      return;
    }

    if (!window.confirm(`–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –≤—ã–≥–Ω–∞—Ç—å ${userToKick.username} –∏–∑ –ª–æ–±–±–∏?`)) {
        return;
    }

    try {
      const response = await fetch(`/api/lobbies/${lobby.id}/kick`, {
        method: 'PUT',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ 
          userIdToKick: userToKick.id,
          hostId: user.id // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º ID —Ö–æ—Å—Ç–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞ –±—ç–∫–µ–Ω–¥–µ
        }),
      });

      const updatedLobby = await response.json();

      if (!response.ok) {
        throw new Error(updatedLobby.message || "–ù–µ —É–¥–∞–ª–æ—Å—å –∫–∏–∫–Ω—É—Ç—å –∏–≥—Ä–æ–∫–∞");
      }

      // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ª–æ–±–±–∏ –Ω–∞ –∫–ª–∏–µ–Ω—Ç–µ –¥–∞–Ω–Ω—ã–º–∏ —Å —Å–µ—Ä–≤–µ—Ä–∞
      setLobby(updatedLobby);
      toast.success(`–ò–≥—Ä–æ–∫ ${userToKick.username} –±—ã–ª –∏—Å–∫–ª—é—á—ë–Ω.`);

    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–∏–∫–µ –∏–≥—Ä–æ–∫–∞:", error);
      toast.error(error.message);
    }
  };

  const hostWinnerControls = (
    user?.email === lobby?.host.email && lobby?.status === 'in_progress' && (
      <div className="flex flex-col items-center gap-3">
        <p className="font-semibold">–û–ø—Ä–µ–¥–µ–ª–∏—Ç–µ –ø–æ–±–µ–¥–∏—Ç–µ–ª—è:</p>
        <div className="flex gap-4">
          <button onClick={() => handleDeclareWinner('A')} className="px-4 py-2 bg-blue-600 text-white rounded hover:bg-blue-700">–ü–æ–±–µ–¥–∞ –ö–æ–º–∞–Ω–¥—ã –ê</button>
          <button onClick={() => handleDeclareWinner('B')} className="px-4 py-2 bg-red-600 text-white rounded hover:bg-red-700">–ü–æ–±–µ–¥–∞ –ö–æ–º–∞–Ω–¥—ã B</button>
        </div>
      </div>
    )
  );


  // --- 4. –ü–†–û–í–ï–†–ö–ò –ò JSX ---
  if (isLoading) {
    return <div className="p-8 text-center">–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ª–æ–±–±–∏...</div>;
  }

  if (!lobby) {
    return (
      <div className="p-8 text-center">
        <h1>–õ–æ–±–±–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!</h1>
        <p>–í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω–æ –±—ã–ª–æ —É–¥–∞–ª–µ–Ω–æ. <Link to="/lobby" className="text-blue-500 hover:underline">–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Å–ø–∏—Å–∫—É –ª–æ–±–±–∏</Link></p>
      </div>
    );
  }

  const currentUserSlot = (lobby.slots ?? []).find(slot => slot.user?.email === user?.email);
  const isCurrentUserSpectator = (lobby.spectators ?? []).some(spec => spec.email === user?.email);

  console.log("%c–†–ï–ù–î–ï–† –ö–û–ú–ü–û–ù–ï–ù–¢–ê. –°—Ç–∞—Ç—É—Å isReady:", "color: purple;", currentUserSlot?.user?.isReady);

return (
    <>
      <UserProfileModal userToShow={modalUser} onClose={() => setModalUser(null)} />

      {/* --- üëá –ï–î–ò–ù–û–ï "–ü–õ–ê–í–ê–Æ–©–ï–ï" –ú–ï–ù–Æ üëá --- */}
      {menuData.targetUser && menuData.position && (
        <div 
          ref={dropdownRef}
          style={{ 
            position: 'absolute', 
            top: `${menuData.position.top + 5}px`, 
            left: `${menuData.position.left + 5}px`,
            zIndex: 30
          }}
        >
          <UserActionsDropdown
            onKickPlayer={handleKickPlayer} 
            targetUser={menuData.targetUser} 
            currentUser={user}
            lobby={lobby}
            onShowProfile={() => {
              setModalUser(menuData.targetUser);
              setMenuData({ targetUser: null, position: null });
            }}
          />
        </div>
      )}

            {/* --- üëá –î–û–ë–ê–í–õ–Ø–ï–ú –£–°–õ–û–í–ù–´–ô –†–ï–ù–î–ï–† –ü–û–ü-–ê–ü–ê "–ò–ì–†–ê –ù–ê–ß–ê–õ–ê–°–¨" üëá --- */}
      {lobby.status === 'in_progress' && (
        <GameInProgressModal 
          hostControls={hostWinnerControls} />
      )}
            
      {/* --- üëá –ù–û–í–´–ô –ë–ê–ù–ù–ï–† –õ–û–ë–ë–ò üëá --- */}
       <div 
        className="fixed top-0 left-0 w-screen h-screen bg-cover bg-center filter blur-md -z-10"
        style={{ backgroundImage: `url(${GAME_ASSETS[lobby.game]?.bg})` }}
      ></div>

            {/* --- üëá –ò–ó–ú–ï–ù–ï–ù–ò–ï –ó–î–ï–°–¨: –î–æ–±–∞–≤–ª—è–µ–º –≥—Ä–∞–¥–∏–µ–Ω—Ç–Ω–æ–µ –∑–∞—Ç–µ–º–Ω–µ–Ω–∏–µ üëá --- */}
      <div 
        className="fixed top-0 left-0 w-screen h-screen -z-10"
        style={{ background: 'linear-gradient(to bottom, rgba(17, 24, 39, 0), rgba(17, 24, 39, 0.94) 90%)' }}
      ></div>

       <div className="relative z-0">

        <div className="relative h-64 w-full flex flex-col items-center justify-center text-white font-orbitron">
          <h1 className="text-7xl font-orbitron font-bold" style={{ textShadow: "1px 1px 3px rgba(0,0,0,0.7)" }}>{lobby.title}</h1>
          <p className="text-gray-300 text-3xl" style={{ textShadow: "1px 1px 3px rgba(0,0,0,0.7)" }}>{lobby.game} - {lobby.mode}</p>
        </div>
      </div>

      {/* --- üëá –î–û–ë–ê–í–õ–Ø–ï–ú –£–°–õ–û–í–ù–´–ô "–ë–õ–Æ–†" –î–õ–Ø –§–û–ù–ê üëá --- */}
      <div 
        className={`min-h-screen p-4 sm:p-8 transition-filter duration-300 ${
          lobby.status === 'in_progress' ? 'filter blur-md pointer-events-none' : ''
        }`}
          ref={(el) => {
            if (el) {
              if (lobby.status === 'in_progress') {
                document.body.classList.add('overflow-hidden');
              } else {
                document.body.classList.remove('overflow-hidden');
              }
            }
          }}
      >
        <div className="w-full px-4 sm:px-6 lg:px-8">

          <div className="grid grid-cols-1 lg:grid-cols-8 gap-6">
            
            {/* --- 1. –õ–µ–≤–∞—è –∫–æ–ª–æ–Ω–∫–∞: –ó—Ä–∏—Ç–µ–ª–∏ --- */}
            <div className="lg:col-span-2 bg-dark-surface/60 rounded-lg shadow-lg border border-brand-blue p-4 flex flex-col h-[925px] w-[450px]">
              <h2 className="text-xl font-semibold mb-4 border-b border-gray-700 pb-2 text-white font-orbitron text-center">Spectators ({(lobby.spectators ?? []).length})</h2>
              <ul className="space-y-2 flex-grow overflow-y-auto pr-2">
                {(lobby.spectators ?? []).map((spectator) => ( 
                  <li key={spectator.id} className="text-sm"> 
                    <button 
                      onClick={(e) => handleUserClick(e, spectator)}
                      className="flex items-center gap-2 w-full text-left text-gray-300 p-2 bg-dark-bg rounded hover:bg-gray-700"
                    >
                      <img src={spectator.avatarUrl} alt="–ê–≤–∞—Ç–∞—Ä" className="w-6 h-6 rounded-full" />
                      <span>{spectator.username}</span>
                    </button>
                  </li> 
                ))}
              </ul>
            </div>

            <div className="lg:col-span-4 flex flex-col gap-6">

            {/* --- 2. –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞—è —á–∞—Å—Ç—å: –°–ª–æ—Ç—ã --- */}
            <div className="lg:col-span-2 p-4">
              
              <div className="flex justify-around items-start">
                
                {/* --- –ö–æ–ª–æ–Ω–∫–∞ –ö–æ–º–∞–Ω–¥—ã –ê --- */}
                <div className="w-full">
                  <h3 className="font-bold font-orbitron text-lg mb-2 text-blue-400 text-center"
                  style={{ textShadow: "1px 1px 3px rgba(0,0,0,0.7)" }}
                  >Team A</h3>
                  <div className="space-y-2">
                    {(lobby.slots ?? [])
                      .filter(s => s.team === 'A')
                      .map((slot, index) => (
                        <div className="max-w-xs mx-auto">
                          <div 
                            key={`${'A'}-${index}`} 
                            className={`relative rounded-md transition-transform hover:scale-105 flex items-center justify-center bg-dark-bg h-12 border-2 transition-colors ${
                              !slot.user
                                ? 'border-gray-700'
                                : slot.user.isReady
                                  ? 'border-brand-green'
                                  : 'border-amber-500'
                            }`}
                          >
                            {slot.user ? (
                              <>
                                <button onClick={(e) => handleUserClick(e, slot.user)} className="flex items-center gap-2 cursor-pointer rounded-md p-1 hover:bg-gray-700">
                                  <img src={slot.user.avatarUrl || `https://api.dicebear.com/7.x/pixel-art/svg?seed=${slot.user.username}`} alt="–ê–≤–∞—Ç–∞—Ä" className="w-6 h-6 rounded-full" />
                                  <span className={`font-semibold ${lobby.host?.email === slot.user.email ? 'text-purple-400' : 'text-gray-200'}`}>
                                    {slot.user.username} {lobby.host?.email === slot.user.email && 'üëë'}
                                  </span>
                                </button>
                                {user && slot.user.email === user.email && (
                                  <button onClick={() => handleLeaveSlot(slot)} className="absolute font-orbitron inset w-full h-full flex items-center justify-center bg-yellow-500 bg-opacity-80 text-white font-bold opacity-0 hover:opacity-100 transition-opacity">
                                    LEAVE
                                  </button>
                                )}
                              </>
                            ) : (
                              <button onClick={() => handleOccupySlot(slot)} className="absolute rounded-md font-orbitron inset-0 w-full h-full flex items-center justify-center bg-green-500 bg-opacity-70 text-white font-bold opacity-0 hover:opacity-100 transition-opacity">
                                ENTER
                              </button>
                            )}
                          </div>
                        </div>
                    ))}
                  </div>
                </div>

                {/* --- –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å "VS" --- */}
                <div className="flex-shrink-0 pt-16 text-2xl font-bold font-orbitron text-gray-600 flex items-center justify-center w-48">
                  {lobby.status === 'countdown' && timer !== null ? (
                    // –ï—Å–ª–∏ –∏–¥–µ—Ç –æ—Ç—Å—á–µ—Ç, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –¢–ê–ô–ú–ï–†
                    <div className="text-center pt-16"
                    style={{ textShadow: "2px 2px 4px rgba(0,0,0,0.7)" }}
                    >
                      <p className="text-gray-200 text-6x1">START IN:</p>
                      <p className="text-5xl font-bold text-brand-blue animate-pulse">{timer}</p>
                    </div>
                  ) : (
                    <div className="flex items-center transition-transform hover:scale-105 justify-center pt-16 text-6xl font-bold font-orbitron text-white"
                    style={{ textShadow: "2px 2px 4px rgba(0,0,0,0.7)" }}
                    >
                      VS
                    </div>
                  )}  
                </div>

                {/* --- –ö–æ–ª–æ–Ω–∫–∞ –ö–æ–º–∞–Ω–¥—ã B --- */}
                <div className="w-full">
                  <h3 className="font-bold font-orbitron text-lg mb-2 text-red-500 text-center"
                  style={{ textShadow: "1px 1px 3px rgba(0,0,0,0.7)" }}
                  >Team B</h3>
                  <div className="space-y-2">
                    {(lobby.slots ?? [])
                      .filter(s => s.team === 'B')
                      .map((slot, index) => (
                        <div className="max-w-xs mx-auto">
                          <div 
                            key={`${'B'}-${index}`} 
                            className={`relative rounded-md transition-transform hover:scale-105 flex items-center justify-center bg-dark-bg h-12 border-2 transition-colors ${
                              !slot.user
                                ? 'border-gray-700'
                                : slot.user.isReady
                                  ? 'border-brand-green'
                                  : 'border-amber-500'
                            }`}
                          >
                            {slot.user ? (
                              <>
                                <button onClick={(e) => handleUserClick(e, slot.user)} className="flex items-center gap-2 cursor-pointer rounded-md p-1 hover:bg-gray-700">
                                  <img src={slot.user.avatarUrl || `https://api.dicebear.com/7.x/pixel-art/svg?seed=${slot.user.username}`} alt="–ê–≤–∞—Ç–∞—Ä" className="w-6 h-6 rounded-full" />
                                  <span className={`font-semibold ${lobby.host?.email === slot.user.email ? 'text-purple-400' : 'text-gray-200'}`}>
                                    {slot.user.username} {lobby.host?.email === slot.user.email && 'üëë'}
                                  </span>
                                </button>
                                {user && slot.user.email === user.email && (
                                  <button onClick={() => handleLeaveSlot(slot)} className="absolute font-orbitron inset-0 w-full h-full flex items-center justify-center bg-yellow-500 bg-opacity-80 text-white font-bold opacity-0 hover:opacity-100 transition-opacity">
                                    LEAVE
                                  </button>
                                )}
                              </>
                            ) : (
                              <button onClick={() => handleOccupySlot(slot)} className="absolute rounded-md font-orbitron inset-0 w-full h-full flex items-center justify-center bg-green-500 bg-opacity-70 text-white font-bold opacity-0 hover:opacity-100 transition-opacity">
                                ENTER
                              </button>
                            )}
                          </div>
                        </div>
                    ))}
                  </div>
                </div>
                
              </div>
            </div>


                {/* --- üëá –û–ë–ù–û–í–õ–ï–ù–ù–´–ô –ë–õ–û–ö –° –ö–ù–û–ü–ö–ê–ú–ò –ò –¢–ê–ô–ú–ï–†–û–ú üëá --- */}
              {/* –≠—Ç–æ—Ç –±–ª–æ–∫ –±—É–¥–µ—Ç –≤–∏–¥–µ–Ω, –µ—Å–ª–∏ —Ç—ã –≤ –ª–æ–±–±–∏ (–∏–≥—Ä–æ–∫ –∏–ª–∏ –∑—Ä–∏—Ç–µ–ª—å) */}
              {(currentUserSlot || isCurrentUserSpectator) && (
                <div className="flex flex-col items-center gap-4">

                  {/* –û—Å–Ω–æ–≤–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –≤–∏–¥–Ω—ã, –ø–æ–∫–∞ –∏–≥—Ä–∞ –Ω–µ –Ω–∞—á–∞–ª–∞—Å—å */}
                  {lobby.status !== 'in_progress' && (
                    <div className="flex justify-center items-center gap-4">
                      {/* –ö–Ω–æ–ø–∫–∞ "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å" / "–û—Ç–º–µ–Ω–∏—Ç—å" –¥–ª—è –∏–≥—Ä–æ–∫–∞ –≤ —Å–ª–æ—Ç–µ */}
                      {currentUserSlot && (
                        <button 
                          onClick={handleReadyToggle} 
                          className={`px-6 py-2 rounded-md font-semibold text-white transition-colors font-orbitron transition-transform hover:scale-105 ${
                            currentUserSlot.user?.isReady 
                              ? 'bg-gray-600 hover:bg-gray-500' 
                              : 'bg-brand-green hover:bg-green-400'
                          }`}
                        >
                          {currentUserSlot.user?.isReady ? 'CANCEL' : 'READY'}
                        </button>
                      )}

                      {/* –ö–Ω–æ–ø–∫–∞ "–ù–∞—á–∞—Ç—å –∏–≥—Ä—É" –¥–ª—è —Ö–æ—Å—Ç–∞ (–ø–æ—è–≤–ª—è–µ—Ç—Å—è, –∫–æ–≥–¥–∞ –≤—Å–µ –≥–æ—Ç–æ–≤—ã) */}
                      {user?.email === lobby.host.email && allPlayersReady && (
                      <button onClick={handleStartGame} className="px-6 py-2 font-orbitron rounded-md font-semibold bg-brand-blue hover:bg-blue-400 text-white transition-colors transition-transform hover:scale-105">
                        START
                      </button>
                      )}
                      <button onClick={handleLeaveLobby} className="px-6 py-2 font-orbitron rounded-md font-semibold bg-brand-red hover:bg-red-400 text-white transition-colors transition-transform hover:scale-105">
                        LEAVE
                      </button>
                    </div>
                  )}
                </div>
              )}

            {/* --- 3. –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞—è —á–∞—Å—Ç—å: –ß–∞—Ç --- */}
            <div className="rounded-lg flex flex-col h-[500px] mt-auto">
              
              {/* üëá –≠—Ç–æ—Ç div —Ç–µ–ø–µ—Ä—å —É–ø—Ä–∞–≤–ª—è–µ—Ç –æ—Ç—Å—Ç—É–ø–∞–º–∏ –∏ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π, –∏ –¥–ª—è —Ñ–æ—Ä–º—ã üëá */}
              <div className="flex flex-col flex-grow p-2 overflow-hidden">
                
                {/* –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π */}
                <div ref={chatContainerRef} className="flex-grow space-y-3 overflow-y-auto pr-2 no-scrollbar">
                  {(lobby.chat ?? []).map((msg, index) => ( 
                    <div key={index} className="flex items-start gap-2">
                      <img src={msg.user.avatarUrl} alt="–ê–≤–∞—Ç–∞—Ä" className="w-8 h-8 rounded-full mt-1"/>
                      <div className="flex-grow">
                        <button 
                          onClick={(e) => handleUserClick(e, msg.user)}
                          className="font-bold text-sm text-left text-gray-200 hover:underline"
                        >
                          {msg.user.username}
                        </button>
                        <p className="text-gray-300 p-2 rounded-lg break-words">{msg.message}</p>
                      </div>
                    </div> 
                  ))}  
                </div>

                {/* –§–æ—Ä–º–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è */}
                <form onSubmit={handleSendMessage} className="flex gap-2 mt-4">
                  <input 
                    type="text" 
                    value={chatMessage} 
                    onChange={(e) => setChatMessage(e.target.value)} 
                    className="w-full bg-dark-bg border border-gray-600 rounded-md p-2 text-gray-200" 
                    placeholder="Your message..."
                  />
                  <button 
                    type="submit" 
                    className="text-2xl bg-brand-blue hover:bg-blue-400 text-white px-4 rounded-md flex-shrink-0"
                  >
                    ¬ª
                  </button>
                </form>
              </div>
            </div>
          </div>  

            {/* --- 4. –ü—Ä–∞–≤–∞—è –∫–æ–ª–æ–Ω–∫–∞: –î—Ä—É–∑—å—è (2 –∏–∑ 8) --- */}
            <div className="lg:col-span-2 bg-dark-surface/60 ml-auto rounded-lg shadow-lg border border-brand-blue p-4 flex flex-col w-[450px]">
              <h2 className="text-xl font-semibold mb-4 border-b border-gray-700 pb-2 text-white font-orbitron text-center">Friends</h2>
              {/* –ó–¥–µ—Å—å –±—É–¥–µ—Ç –∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è —Å–ø–∏—Å–∫–∞ –¥—Ä—É–∑–µ–π */}
              <div className="flex-grow text-gray-500 flex items-center justify-center">
                <p>–°–∫–æ—Ä–æ –∑–¥–µ—Å—å –ø–æ—è–≤—è—Ç—Å—è –¥—Ä—É–∑—å—è...</p>
              </div>
            </div>
          </div> 

        </div>
      </div>
    </>
  );
}